
atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fe  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000723  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036a  00000000  00000000  00001115  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010e  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	unsigned char StepValue;
	
	StepValue = 0x01;
	
	// Port init
	DDRD |= (1 << 7);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 68       	ori	r24, 0x80	; 128
  84:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
  86:	87 b1       	in	r24, 0x07	; 7
  88:	8f 60       	ori	r24, 0x0F	; 15
  8a:	87 b9       	out	0x07, r24	; 7
int main(void)
{
    /* Replace with your application code */
	unsigned char StepValue;
	
	StepValue = 0x01;
  8c:	81 e0       	ldi	r24, 0x01	; 1
	DDRC |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
	
    while (1) 
    {
		 //TODO:: Please write your application code
		 StepValue = driveStepper(StepValue);
  8e:	0e 94 52 00 	call	0xa4	; 0xa4 <driveStepper>
  92:	fd cf       	rjmp	.-6      	; 0x8e <main+0xe>

00000094 <isButtonPressed>:


////////////////////////////////////////////////////
int isButtonPressed(unsigned char bitPos)
{
	if (PIND7 & bitPos)
  94:	87 70       	andi	r24, 0x07	; 7
  96:	19 f0       	breq	.+6      	; 0x9e <isButtonPressed+0xa>
	return 1;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret
	else
	return 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
}
  a2:	08 95       	ret

000000a4 <driveStepper>:

////////////////////////////////////////////////////
unsigned char driveStepper(unsigned char StepValue)
{
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
	
	
	PORTC = StepValue;
  a8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f e7       	ldi	r18, 0x7F	; 127
  ac:	86 e2       	ldi	r24, 0x26	; 38
  ae:	94 e0       	ldi	r25, 0x04	; 4
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <driveStepper+0xc>
  b8:	00 c0       	rjmp	.+0      	; 0xba <driveStepper+0x16>
  ba:	00 00       	nop
	
	_delay_ms(DELAY_BASE);
	
	if (!isButtonPressed(0x01))
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 4a 00 	call	0x94	; 0x94 <isButtonPressed>
  c2:	89 2b       	or	r24, r25
  c4:	29 f4       	brne	.+10     	; 0xd0 <driveStepper+0x2c>
	{
		StepValue <<= 1;
  c6:	8c 2f       	mov	r24, r28
  c8:	88 0f       	add	r24, r24
		
		if (StepValue == 0x10)
  ca:	80 31       	cpi	r24, 0x10	; 16
  cc:	41 f4       	brne	.+16     	; 0xde <driveStepper+0x3a>
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <driveStepper+0x34>
		StepValue = 0x01;
	}
	else
	{
		StepValue >>= 1;
  d0:	8c 2f       	mov	r24, r28
  d2:	86 95       	lsr	r24
		
		if (StepValue == 0x00)
  d4:	19 f0       	breq	.+6      	; 0xdc <driveStepper+0x38>
  d6:	03 c0       	rjmp	.+6      	; 0xde <driveStepper+0x3a>
	if (!isButtonPressed(0x01))
	{
		StepValue <<= 1;
		
		if (StepValue == 0x10)
		StepValue = 0x01;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <driveStepper+0x3a>
	else
	{
		StepValue >>= 1;
		
		if (StepValue == 0x00)
		StepValue = 0x08;
  dc:	88 e0       	ldi	r24, 0x08	; 8
	}
	
	return StepValue;
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
