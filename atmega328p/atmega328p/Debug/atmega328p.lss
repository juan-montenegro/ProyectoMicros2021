
atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fe  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000723  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036a  00000000  00000000  00001111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010e  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	unsigned char StepValue;
	
	StepValue = 0x01;
	
	// Port init
	DDRC |= (1 << 6);
  80:	87 b1       	in	r24, 0x07	; 7
  82:	80 64       	ori	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
	DDRC = 0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	87 b9       	out	0x07, r24	; 7
int main(void)
{
    /* Replace with your application code */
	unsigned char StepValue;
	
	StepValue = 0x01;
  8a:	81 e0       	ldi	r24, 0x01	; 1
	DDRC = 0xff;
	
    while (1) 
    {
		 //TODO:: Please write your application code
		 StepValue = driveStepper(StepValue);
  8c:	0e 94 51 00 	call	0xa2	; 0xa2 <driveStepper>
  90:	fd cf       	rjmp	.-6      	; 0x8c <main+0xc>

00000092 <isButtonPressed>:


////////////////////////////////////////////////////
int isButtonPressed(unsigned char bitPos)
{
	if (PINC6 & bitPos)
  92:	86 70       	andi	r24, 0x06	; 6
  94:	19 f0       	breq	.+6      	; 0x9c <isButtonPressed+0xa>
	return 1;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret
	else
	return 0;
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
}
  a0:	08 95       	ret

000000a2 <driveStepper>:

////////////////////////////////////////////////////
unsigned char driveStepper(unsigned char StepValue)
{
  a2:	cf 93       	push	r28
  a4:	c8 2f       	mov	r28, r24
	
	
	PORTC = StepValue;
  a6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f e7       	ldi	r18, 0x7F	; 127
  aa:	86 e2       	ldi	r24, 0x26	; 38
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <driveStepper+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <driveStepper+0x16>
  b8:	00 00       	nop
	
	_delay_ms(DELAY_BASE);
	
	if (!isButtonPressed(0x01))
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 49 00 	call	0x92	; 0x92 <isButtonPressed>
  c0:	89 2b       	or	r24, r25
  c2:	29 f4       	brne	.+10     	; 0xce <driveStepper+0x2c>
	{
		StepValue <<= 1;
  c4:	8c 2f       	mov	r24, r28
  c6:	88 0f       	add	r24, r24
		
		if (StepValue == 0x10)
  c8:	80 31       	cpi	r24, 0x10	; 16
  ca:	41 f4       	brne	.+16     	; 0xdc <driveStepper+0x3a>
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <driveStepper+0x34>
		StepValue = 0x01;
	}
	else
	{
		StepValue >>= 1;
  ce:	8c 2f       	mov	r24, r28
  d0:	86 95       	lsr	r24
		
		if (StepValue == 0x00)
  d2:	19 f0       	breq	.+6      	; 0xda <driveStepper+0x38>
  d4:	03 c0       	rjmp	.+6      	; 0xdc <driveStepper+0x3a>
	if (!isButtonPressed(0x01))
	{
		StepValue <<= 1;
		
		if (StepValue == 0x10)
		StepValue = 0x01;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <driveStepper+0x3a>
	else
	{
		StepValue >>= 1;
		
		if (StepValue == 0x00)
		StepValue = 0x08;
  da:	88 e0       	ldi	r24, 0x08	; 8
	}
	
	return StepValue;
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
