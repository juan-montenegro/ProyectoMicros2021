
radar ultrasonido.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000278  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c97  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070e  00000000  00000000  00001057  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067e  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006cd  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	//Uart iniciacion
	uart_init();
  6c:	0e 94 2c 01 	call	0x258	; 0x258 <uart_init>
	
		/* Set period in between two steps */
	
	// Port init
	DDRA = 0x00;
  70:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0x0F;
  72:	8f e0       	ldi	r24, 0x0F	; 15
  74:	84 bb       	out	0x14, r24	; 20
	
	while(1)
	{
		//TODO:: Please write your application code
		driveStepper();
  76:	0e 94 3e 00 	call	0x7c	; 0x7c <driveStepper>
  7a:	fd cf       	rjmp	.-6      	; 0x76 <main+0xa>

0000007c <driveStepper>:
{
	int period;	
	period = 100;
	
	float anguloMotor=0;
	(*angulo) = anguloMotor;
  7c:	fc 01       	movw	r30, r24
  7e:	10 82       	st	Z, r1
  80:	11 82       	std	Z+1, r1	; 0x01
  82:	12 82       	std	Z+2, r1	; 0x02
  84:	13 82       	std	Z+3, r1	; 0x03
	
	for(int i=0;i<16;i++)
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	59 c0       	rjmp	.+178    	; 0x13e <driveStepper+0xc2>
	{
		PORTC = 0x09;
  8c:	29 e0       	ldi	r18, 0x09	; 9
  8e:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	ff ef       	ldi	r31, 0xFF	; 255
  92:	20 e7       	ldi	r18, 0x70	; 112
  94:	32 e0       	ldi	r19, 0x02	; 2
  96:	f1 50       	subi	r31, 0x01	; 1
  98:	20 40       	sbci	r18, 0x00	; 0
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <driveStepper+0x1a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <driveStepper+0x24>
  a0:	00 00       	nop
		anguloMotor +=2.8125;
		_delay_ms(period);
		PORTC = 0x08;
  a2:	28 e0       	ldi	r18, 0x08	; 8
  a4:	25 bb       	out	0x15, r18	; 21
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	e0 e7       	ldi	r30, 0x70	; 112
  aa:	f2 e0       	ldi	r31, 0x02	; 2
  ac:	41 50       	subi	r20, 0x01	; 1
  ae:	e0 40       	sbci	r30, 0x00	; 0
  b0:	f0 40       	sbci	r31, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <driveStepper+0x30>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <driveStepper+0x3a>
  b6:	00 00       	nop
		anguloMotor +=2.8125;
		_delay_ms(period);
		PORTC = 0x0C;
  b8:	2c e0       	ldi	r18, 0x0C	; 12
  ba:	25 bb       	out	0x15, r18	; 21
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	30 e7       	ldi	r19, 0x70	; 112
  c0:	42 e0       	ldi	r20, 0x02	; 2
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	40 40       	sbci	r20, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <driveStepper+0x46>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <driveStepper+0x50>
  cc:	00 00       	nop
		anguloMotor +=2.8125;
		_delay_ms(period);
		PORTC = 0x04;
  ce:	24 e0       	ldi	r18, 0x04	; 4
  d0:	25 bb       	out	0x15, r18	; 21
  d2:	ef ef       	ldi	r30, 0xFF	; 255
  d4:	f0 e7       	ldi	r31, 0x70	; 112
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	e1 50       	subi	r30, 0x01	; 1
  da:	f0 40       	sbci	r31, 0x00	; 0
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <driveStepper+0x5c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <driveStepper+0x66>
  e2:	00 00       	nop
		anguloMotor +=2.8125;
		_delay_ms(period);
		PORTC = 0x06;
  e4:	26 e0       	ldi	r18, 0x06	; 6
  e6:	25 bb       	out	0x15, r18	; 21
  e8:	3f ef       	ldi	r19, 0xFF	; 255
  ea:	40 e7       	ldi	r20, 0x70	; 112
  ec:	e2 e0       	ldi	r30, 0x02	; 2
  ee:	31 50       	subi	r19, 0x01	; 1
  f0:	40 40       	sbci	r20, 0x00	; 0
  f2:	e0 40       	sbci	r30, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <driveStepper+0x72>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <driveStepper+0x7c>
  f8:	00 00       	nop
		anguloMotor +=2.8125;
		_delay_ms(period);
		PORTC = 0x02;
  fa:	22 e0       	ldi	r18, 0x02	; 2
  fc:	25 bb       	out	0x15, r18	; 21
  fe:	ff ef       	ldi	r31, 0xFF	; 255
 100:	20 e7       	ldi	r18, 0x70	; 112
 102:	32 e0       	ldi	r19, 0x02	; 2
 104:	f1 50       	subi	r31, 0x01	; 1
 106:	20 40       	sbci	r18, 0x00	; 0
 108:	30 40       	sbci	r19, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <driveStepper+0x88>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <driveStepper+0x92>
 10e:	00 00       	nop
		anguloMotor +=2.8125;
		_delay_ms(period);
		PORTC = 0x03;
 110:	23 e0       	ldi	r18, 0x03	; 3
 112:	25 bb       	out	0x15, r18	; 21
 114:	4f ef       	ldi	r20, 0xFF	; 255
 116:	e0 e7       	ldi	r30, 0x70	; 112
 118:	f2 e0       	ldi	r31, 0x02	; 2
 11a:	41 50       	subi	r20, 0x01	; 1
 11c:	e0 40       	sbci	r30, 0x00	; 0
 11e:	f0 40       	sbci	r31, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <driveStepper+0x9e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <driveStepper+0xa8>
 124:	00 00       	nop
		anguloMotor +=2.8125;
		_delay_ms(period);
		PORTC = 0x01;
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	25 bb       	out	0x15, r18	; 21
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	30 e7       	ldi	r19, 0x70	; 112
 12e:	42 e0       	ldi	r20, 0x02	; 2
 130:	21 50       	subi	r18, 0x01	; 1
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	40 40       	sbci	r20, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <driveStepper+0xb4>
 138:	00 c0       	rjmp	.+0      	; 0x13a <driveStepper+0xbe>
 13a:	00 00       	nop
	period = 100;
	
	float anguloMotor=0;
	(*angulo) = anguloMotor;
	
	for(int i=0;i<16;i++)
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	80 31       	cpi	r24, 0x10	; 16
 140:	91 05       	cpc	r25, r1
 142:	0c f4       	brge	.+2      	; 0x146 <driveStepper+0xca>
 144:	a3 cf       	rjmp	.-186    	; 0x8c <driveStepper+0x10>
		_delay_ms(period);
		PORTC = 0x01;
		anguloMotor +=2.8125;
		_delay_ms(period);
	}
	PORTC = 0x09;		/* Last step to initial position */
 146:	89 e0       	ldi	r24, 0x09	; 9
 148:	85 bb       	out	0x15, r24	; 21
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	90 e7       	ldi	r25, 0x70	; 112
 14e:	e2 e0       	ldi	r30, 0x02	; 2
 150:	81 50       	subi	r24, 0x01	; 1
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e0 40       	sbci	r30, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <driveStepper+0xd4>
 158:	00 c0       	rjmp	.+0      	; 0x15a <driveStepper+0xde>
 15a:	00 00       	nop
 15c:	ff ef       	ldi	r31, 0xFF	; 255
 15e:	29 e6       	ldi	r18, 0x69	; 105
 160:	38 e1       	ldi	r19, 0x18	; 24
 162:	f1 50       	subi	r31, 0x01	; 1
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	30 40       	sbci	r19, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <driveStepper+0xe6>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <driveStepper+0xf0>
 16c:	00 00       	nop
	_delay_ms(period);
	_delay_ms(1000);

	/* Rotate Stepper Motor Anticlockwise with Full step sequence */
	for(int i=0;i<16;i++)
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	59 c0       	rjmp	.+178    	; 0x226 <driveStepper+0x1aa>
	{
		PORTC = 0x09;
 174:	29 e0       	ldi	r18, 0x09	; 9
 176:	25 bb       	out	0x15, r18	; 21
 178:	4f ef       	ldi	r20, 0xFF	; 255
 17a:	e0 e7       	ldi	r30, 0x70	; 112
 17c:	f2 e0       	ldi	r31, 0x02	; 2
 17e:	41 50       	subi	r20, 0x01	; 1
 180:	e0 40       	sbci	r30, 0x00	; 0
 182:	f0 40       	sbci	r31, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <driveStepper+0x102>
 186:	00 c0       	rjmp	.+0      	; 0x188 <driveStepper+0x10c>
 188:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x01;
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	25 bb       	out	0x15, r18	; 21
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	30 e7       	ldi	r19, 0x70	; 112
 192:	42 e0       	ldi	r20, 0x02	; 2
 194:	21 50       	subi	r18, 0x01	; 1
 196:	30 40       	sbci	r19, 0x00	; 0
 198:	40 40       	sbci	r20, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <driveStepper+0x118>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <driveStepper+0x122>
 19e:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x03;
 1a0:	23 e0       	ldi	r18, 0x03	; 3
 1a2:	25 bb       	out	0x15, r18	; 21
 1a4:	ef ef       	ldi	r30, 0xFF	; 255
 1a6:	f0 e7       	ldi	r31, 0x70	; 112
 1a8:	22 e0       	ldi	r18, 0x02	; 2
 1aa:	e1 50       	subi	r30, 0x01	; 1
 1ac:	f0 40       	sbci	r31, 0x00	; 0
 1ae:	20 40       	sbci	r18, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <driveStepper+0x12e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <driveStepper+0x138>
 1b4:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x02;
 1b6:	22 e0       	ldi	r18, 0x02	; 2
 1b8:	25 bb       	out	0x15, r18	; 21
 1ba:	3f ef       	ldi	r19, 0xFF	; 255
 1bc:	40 e7       	ldi	r20, 0x70	; 112
 1be:	e2 e0       	ldi	r30, 0x02	; 2
 1c0:	31 50       	subi	r19, 0x01	; 1
 1c2:	40 40       	sbci	r20, 0x00	; 0
 1c4:	e0 40       	sbci	r30, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <driveStepper+0x144>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <driveStepper+0x14e>
 1ca:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x06;
 1cc:	26 e0       	ldi	r18, 0x06	; 6
 1ce:	25 bb       	out	0x15, r18	; 21
 1d0:	ff ef       	ldi	r31, 0xFF	; 255
 1d2:	20 e7       	ldi	r18, 0x70	; 112
 1d4:	32 e0       	ldi	r19, 0x02	; 2
 1d6:	f1 50       	subi	r31, 0x01	; 1
 1d8:	20 40       	sbci	r18, 0x00	; 0
 1da:	30 40       	sbci	r19, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <driveStepper+0x15a>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <driveStepper+0x164>
 1e0:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x04;
 1e2:	24 e0       	ldi	r18, 0x04	; 4
 1e4:	25 bb       	out	0x15, r18	; 21
 1e6:	4f ef       	ldi	r20, 0xFF	; 255
 1e8:	e0 e7       	ldi	r30, 0x70	; 112
 1ea:	f2 e0       	ldi	r31, 0x02	; 2
 1ec:	41 50       	subi	r20, 0x01	; 1
 1ee:	e0 40       	sbci	r30, 0x00	; 0
 1f0:	f0 40       	sbci	r31, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <driveStepper+0x170>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <driveStepper+0x17a>
 1f6:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x0C;
 1f8:	2c e0       	ldi	r18, 0x0C	; 12
 1fa:	25 bb       	out	0x15, r18	; 21
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	30 e7       	ldi	r19, 0x70	; 112
 200:	42 e0       	ldi	r20, 0x02	; 2
 202:	21 50       	subi	r18, 0x01	; 1
 204:	30 40       	sbci	r19, 0x00	; 0
 206:	40 40       	sbci	r20, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <driveStepper+0x186>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <driveStepper+0x190>
 20c:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x08;
 20e:	28 e0       	ldi	r18, 0x08	; 8
 210:	25 bb       	out	0x15, r18	; 21
 212:	ef ef       	ldi	r30, 0xFF	; 255
 214:	f0 e7       	ldi	r31, 0x70	; 112
 216:	22 e0       	ldi	r18, 0x02	; 2
 218:	e1 50       	subi	r30, 0x01	; 1
 21a:	f0 40       	sbci	r31, 0x00	; 0
 21c:	20 40       	sbci	r18, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <driveStepper+0x19c>
 220:	00 c0       	rjmp	.+0      	; 0x222 <driveStepper+0x1a6>
 222:	00 00       	nop
	PORTC = 0x09;		/* Last step to initial position */
	_delay_ms(period);
	_delay_ms(1000);

	/* Rotate Stepper Motor Anticlockwise with Full step sequence */
	for(int i=0;i<16;i++)
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	80 31       	cpi	r24, 0x10	; 16
 228:	91 05       	cpc	r25, r1
 22a:	0c f4       	brge	.+2      	; 0x22e <driveStepper+0x1b2>
 22c:	a3 cf       	rjmp	.-186    	; 0x174 <driveStepper+0xf8>
		PORTC = 0x0C;
		_delay_ms(period);
		PORTC = 0x08;
		_delay_ms(period);
	}
	PORTC = 0x09;
 22e:	89 e0       	ldi	r24, 0x09	; 9
 230:	85 bb       	out	0x15, r24	; 21
 232:	3f ef       	ldi	r19, 0xFF	; 255
 234:	40 e7       	ldi	r20, 0x70	; 112
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	31 50       	subi	r19, 0x01	; 1
 23a:	40 40       	sbci	r20, 0x00	; 0
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <driveStepper+0x1bc>
 240:	00 c0       	rjmp	.+0      	; 0x242 <driveStepper+0x1c6>
 242:	00 00       	nop
 244:	9f ef       	ldi	r25, 0xFF	; 255
 246:	e9 e6       	ldi	r30, 0x69	; 105
 248:	f8 e1       	ldi	r31, 0x18	; 24
 24a:	91 50       	subi	r25, 0x01	; 1
 24c:	e0 40       	sbci	r30, 0x00	; 0
 24e:	f0 40       	sbci	r31, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <driveStepper+0x1ce>
 252:	00 c0       	rjmp	.+0      	; 0x254 <driveStepper+0x1d8>
 254:	00 00       	nop
 256:	08 95       	ret

00000258 <uart_init>:
	// USART Receiver: On
	// USART Transmitter: On
	// USART Mode: Asynchronous
	// USART Baud Rate: 9600
	
	DDRD = 0X02;// 0b0010, bit 0 de entrada (RXD), bit 1 de salida (TXD)
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	81 bb       	out	0x11, r24	; 17
	PORTD= 0x00;//inicializamos el puerto d en 0
 25c:	12 ba       	out	0x12, r1	; 18
	
	UCSRA = 0X00;// inicializa en 0
 25e:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1<<RXEN) | (1<<TXEN); // funciona como receptor y transmisor
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	88 61       	ori	r24, 0x18	; 24
 264:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0); //URSEL registro activado, tamaño 8 bits
 266:	80 b5       	in	r24, 0x20	; 32
 268:	86 68       	ori	r24, 0x86	; 134
 26a:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00; //PARTE ALTA DE LA VELOCIDAD DE COMUNICACIÓN
 26c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x19; //PARTE BAJA DE LA VELOCIDAD DE COMUNICACIÓN
 26e:	89 e1       	ldi	r24, 0x19	; 25
 270:	89 b9       	out	0x09, r24	; 9
 272:	08 95       	ret

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
